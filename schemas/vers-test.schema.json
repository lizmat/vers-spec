{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://packageurl.org/schemas/vers-test.schema-1.0.json",
  "title": "VERS test definition",
  "description": "Schema for Version Range Specifier building and parsing tests with input and expected output.",
  "type": "object",
  "additionalProperties": false,
  "definitions": {
    "version_constraint": {
      "title": "VERS version constraint",
      "description": "A VERS version constraint as two-tuple array of (comparator, version string).",
      "type": "array",
      "additionalProperties": false,
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "title": "Version",
          "description": "A version string.",
          "type": "string",
          "examples": [
            "1.2.3",
            "54.a-RELEASE"
          ]
        },
        {
          "title": "VERS comparator",
          "description": "A VERS version comparator.",
          "type": "string",
          "enum": [
            "",
            "*",
            "=",
            "!=",
            ">=",
            ">",
            "<=",
            "<"
          ]
        }
      ]
    },
    "vers_components": {
      "title": "VERS decoded components",
      "description": "Individual decoded VERS schema and constraints to use as a test input or expected output.",
      "type": "object",
      "properties": {
        "scheme": {
          "title": "VERS scheme",
          "description": "A versioning scheme.",
          "type": "string",
          "examples": [
            "maven",
            "npm",
            "pypi",
            "semver"
          ]
        },
        "version_constraints": {
          "title": "Version constraints list",
          "description": "A list of version constraints as two-tuples of (comparator, version).",
          "type": "array",
          "uniqueItems": true,
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/version_constraint"
          }
        }
      }
    },
    "vers_test": {
      "title": "VERS test",
      "description": "A VERS test with input and expected output.",
      "type": "object",
      "required": [
        "description",
        "test_group",
        "test_type",
        "input"
      ],
      "properties": {
        "description": {
          "title": "Test description",
          "description": "A description for this test.",
          "type": "string"
        },
        "test_group": {
          "title": "Test group",
          "description": "The group of this test like 'base' or 'advanced'.",
          "type": "string",
          "enum": [
            "base",
            "advanced"
          ],
          "meta:enum": {
            "base": "Test group for base conformance tests for VERS building and parsing.",
            "advanced": "Test group for advanced tests to support flexible VERS building and parsing."
          }
        },
        "test_type": {
          "title": "Test type",
          "description": "The type of this test like 'build' or 'parse'.",
          "type": "string",
          "enum": [
            "build",
            "parse",
            "roundtrip",
            "merge",
            "containment"
          ],
          "meta:enum": {
            "build": "A VERS building test from decoded components to a canonical VERS string.",
            "parse": "A VERS parsing test from a VERS string to decoded scheme and constraints list.",
            "roundtrip": "A VERS roundtrip test, parsing then building back a VERS from a canonical string input.",
            "merge": "A VERS merging test from an array of VERS strings to a canonical VERS string.",
            "containment": "A VERS containment to test if a bare version string is comtained in the range of a VERS string."
          }
        },
        "expected_failure": {
          "title": "Expected failure",
          "description": "true if this test input is expected to fail to be processed.",
          "type": "boolean",
          "default": false
        },
        "expected_failure_reason": {
          "title": "Expected failure reason",
          "description": "The reason why this test is is expected to fail if expected_failure is true.",
          "default": null,
          "type": [
            "string",
            "null"
          ]
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "test_type": {
                "const": "parse"
              },
              "expected_failure": {
                "const": false
              }
            },
            "required": [
              "test_type",
              "expected_failure"
            ]
          },
          "then": {
            "properties": {
              "input": {
                "title": "Input test VERS",
                "description": "A VERS string to use as a test input (canonical or not).",
                "type": "string"
              },
              "expected_output": {
                "title": "Expected output decoded VERS components",
                "description": "Test output as an object decoded VERS components, unless expected_failure.",
                "$ref": "#/definitions/vers_components"
              }
            },
            "required": [
              "input",
              "expected_output"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "test_type": {
                "const": "build"
              },
              "expected_failure": {
                "const": false
              }
            },
            "required": [
              "test_type",
              "expected_failure"
            ]
          },
          "then": {
            "properties": {
              "input": {
                "title": "Input decoded VERS components",
                "description": "Test input as an object of decoded VERS components.",
                "$ref": "#/definitions/vers_components"
              },
              "expected_output": {
                "title": "Expected canonical VERS",
                "description": "A canonical VERS string to use as a test ouput.",
                "type": "string"
              }
            },
            "required": [
              "input",
              "expected_output"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "test_type": {
                "const": "roundtrip"
              }
            },
            "required": [
              "test_type"
            ]
          },
          "then": {
            "properties": {
              "input": {
                "title": "Input test VERS",
                "description": "A VERS string to use as a test input (canonical or not).",
                "type": "string"
              },
              "expected_output": {
                "title": "Expected canonical VERS",
                "description": "A canonical VERS string to use as a test ouput.",
                "type": "string"
              }
            },
            "required": [
              "input",
              "expected_output"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "test_type": {
                "const": "merge"
              },
              "expected_failure": {
                "const": false
              }
            },
            "required": [
              "test_type",
              "expected_failure"
            ]
          },
          "then": {
            "properties": {
              "input": {
                "title": "Input list of VERS strings",
                "description": "Test input as a list of VERS strings.",
                "type": "array",
                "uniqueItems": true,
                "minItems": 1,
                "items": {
                  "type": "string"
                }
              },
              "expected_output": {
                "title": "Expected canonical VERS",
                "description": "An expected canonical merged VERS string to use as a test ouput.",
                "type": "string"
              }
            },
            "required": [
              "input",
              "expected_output"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "test_type": {
                "const": "containment"
              },
              "expected_failure": {
                "const": false
              }
            },
            "required": [
              "test_type",
              "expected_failure"
            ]
          },
          "then": {
            "properties": {
              "input": {
                "title": "Input for version containment",
                "description": "A version and a VERS string to use as a containment test input.",
                "type": "object",
                "properties": {
                  "version": {
                    "title": "Input test version",
                    "description": "A version string to for containment in the input VERS.",
                    "type": "string"
                  },
                  "vers": {
                    "title": "Input test VERS",
                    "description": "A canonical VERS string used to test its containmant of the input version.",
                    "type": "string"
                  }
                }
              },
              "expected_output": {
                "title": "True if the version is expected to be contained in the input VERS",
                "description": "A true boolean if the version is contained in the input VERS or false otherwise.",
                "type": "boolean"
              }
            },
            "required": [
              "input",
              "expected_output"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "test_type": {
                "const": "parse"
              },
              "expected_failure": {
                "const": true
              }
            },
            "required": [
              "test_type",
              "expected_failure"
            ]
          },
          "then": {
            "properties": {
              "input": {
                "title": "Input test VERS",
                "description": "A VERS string to use as a test input (canonical or not).",
                "type": "string"
              }
            },
            "required": [
              "input",
              "expected_failure_reason"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "test_type": {
                "const": "build"
              },
              "expected_failure": {
                "const": true
              }
            },
            "required": [
              "test_type",
              "expected_failure"
            ]
          },
          "then": {
            "properties": {
              "input": {
                "title": "Expected output decoded VERS components",
                "description": "Test output as an object decoded VERS components, unless expected_failure.",
                "$ref": "#/definitions/vers_components"
              }
            },
            "required": [
              "input",
              "expected_failure_reason"
            ]
          }
        }
      ]
    }
  },
  "properties": {
    "$schema": {
      "title": "JSON schema",
      "description": "Contains the URL of the JSON schema for Version Range Specifier tests.",
      "constant": "https://packageurl.org/schemas/vers-test.schema-1.0.json",
      "format": "uri"
    },
    "tests": {
      "title": "Test suite",
      "description": "A list of Version Range Specifier tests.",
      "additionalItems": false,
      "type": "array",
      "minItems": 1,
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/vers_test"
      }
    }
  }
}
